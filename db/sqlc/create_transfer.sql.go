// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: create_transfer.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
  from_account_id,
  to_account_id,
  amount,
  exchange_rate,
  from_currency,
  to_currency
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, from_account_id, to_account_id, amount, exchange_rate, from_currency, to_currency, created_at
`

type CreateTransferParams struct {
	FromAccountID int64          `json:"from_account_id"`
	ToAccountID   int64          `json:"to_account_id"`
	Amount        int64          `json:"amount"`
	ExchangeRate  pgtype.Numeric `json:"exchange_rate"`
	FromCurrency  pgtype.Text    `json:"from_currency"`
	ToCurrency    pgtype.Text    `json:"to_currency"`
}

type CreateTransferRow struct {
	ID            int64          `json:"id"`
	FromAccountID int64          `json:"from_account_id"`
	ToAccountID   int64          `json:"to_account_id"`
	Amount        int64          `json:"amount"`
	ExchangeRate  pgtype.Numeric `json:"exchange_rate"`
	FromCurrency  pgtype.Text    `json:"from_currency"`
	ToCurrency    pgtype.Text    `json:"to_currency"`
	CreatedAt     time.Time      `json:"created_at"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (CreateTransferRow, error) {
	row := q.db.QueryRow(ctx, createTransfer,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
		arg.ExchangeRate,
		arg.FromCurrency,
		arg.ToCurrency,
	)
	var i CreateTransferRow
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.ExchangeRate,
		&i.FromCurrency,
		&i.ToCurrency,
		&i.CreatedAt,
	)
	return i, err
}
